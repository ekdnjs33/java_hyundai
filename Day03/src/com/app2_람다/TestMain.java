package com.app2_람다;

public class TestMain {

	public static void main(String[] args) {
		
		/*
		 * 
		 *    람다(lambda)식
		 *    
		 *       OOP는 객체지향이라서 클래스에 집중한 거고,
		 *       함수형 프로그래밍은 메서드에 집중하자! 클래스를 다 걷어버리고!
		 *       정말로 클래스가 없는 건 아니고, 익명 클래스가 실행 때 만들어진다. 
		 *       표면 상으로는 메소드만 표현되지만 실제 익명 클래스 기반으로 돌아간다!
		 *    
		 *    1. 함수형 프로그래밍 언어에 적합한 표현식
		 *    
		 *    		함수형 프로그래밍
		 *    		==> 함수(메서드) 기반으로 프로그래밍을 하자
		 *    		==> 자바는 최소단위 클래스이다.
		 *    		따라서 하나의 메서드가 필요한 경우에도 반드시 클래스가 필요하다.
		 *    		(불필요한 클래스를 매번 생성해야 해 ==> 비효율적)
		 *    
		 *    		그래서 ==> 해결은 메서드만 집중해서 표현할 수 있는 람다식 이용한다.
		 *    			 		==> 실행하면 런타임때 익명클래스가 자동으로 생성된다!
		 *    
		 *    2. 람다식의 특징
		 *    		
		 *    		- 간결한 표현식
		 *    		- 하나의 메서드를 가진 인터페이스 사용시 일반적으로 람다식 사용(*****)
		 *    		- 특정 인터페이스가 하나의 추상메서드를 가지는 것을 강제할 방법으로 
		 *    								@FunctionalInterface 라는 어노테이션 사용.
		 *    
		 *    3. 람다식 문법
		 *    		==> 인터페이스를 활용한 익명의 클래스의 또 다른 표현식이라고 생각하자.
		 *    		==> 메서드의 기능에 따라서 람다식 표현이 달라진다.
		 *    
		 *    
		 *    		매서드 기능에 따른 종류 4가지
		 *    		가. 파라미터 변수 없고 리턴값 없는 경우 ==> 람다식 표현 
		 *    		나. 파라미터 변수 있고 리턴값 없는 경우 ==> 람다식 표현 
		 *    		다. 파라미터 변수 없고 리턴값 있는 경우 ==> 람다식 표현 
		 *    		라. 파라미터 변수 있고 리턴값 있는 경우 ==> 람다식 표현 
		 *    
		 *    
		 *    
		 */

	}

}
